// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PricesClient is the client API for Prices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PricesClient interface {
	SubAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (Prices_SubAllClient, error)
}

type pricesClient struct {
	cc grpc.ClientConnInterface
}

func NewPricesClient(cc grpc.ClientConnInterface) PricesClient {
	return &pricesClient{cc}
}

func (c *pricesClient) SubAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (Prices_SubAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &Prices_ServiceDesc.Streams[0], "/pgrpc.Prices/SubAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &pricesSubAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Prices_SubAllClient interface {
	Recv() (*Stock, error)
	grpc.ClientStream
}

type pricesSubAllClient struct {
	grpc.ClientStream
}

func (x *pricesSubAllClient) Recv() (*Stock, error) {
	m := new(Stock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PricesServer is the server API for Prices service.
// All implementations must embed UnimplementedPricesServer
// for forward compatibility
type PricesServer interface {
	SubAll(*Request, Prices_SubAllServer) error
	mustEmbedUnimplementedPricesServer()
}

// UnimplementedPricesServer must be embedded to have forward compatible implementations.
type UnimplementedPricesServer struct {
}

func (UnimplementedPricesServer) SubAll(*Request, Prices_SubAllServer) error {
	return status.Errorf(codes.Unimplemented, "method SubAll not implemented")
}
func (UnimplementedPricesServer) mustEmbedUnimplementedPricesServer() {}

// UnsafePricesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PricesServer will
// result in compilation errors.
type UnsafePricesServer interface {
	mustEmbedUnimplementedPricesServer()
}

func RegisterPricesServer(s grpc.ServiceRegistrar, srv PricesServer) {
	s.RegisterService(&Prices_ServiceDesc, srv)
}

func _Prices_SubAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PricesServer).SubAll(m, &pricesSubAllServer{stream})
}

type Prices_SubAllServer interface {
	Send(*Stock) error
	grpc.ServerStream
}

type pricesSubAllServer struct {
	grpc.ServerStream
}

func (x *pricesSubAllServer) Send(m *Stock) error {
	return x.ServerStream.SendMsg(m)
}

// Prices_ServiceDesc is the grpc.ServiceDesc for Prices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Prices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pgrpc.Prices",
	HandlerType: (*PricesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubAll",
			Handler:       _Prices_SubAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protocol/broker.proto",
}

// PositionsClient is the client API for Positions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PositionsClient interface {
	Position(ctx context.Context, opts ...grpc.CallOption) (Positions_PositionClient, error)
}

type positionsClient struct {
	cc grpc.ClientConnInterface
}

func NewPositionsClient(cc grpc.ClientConnInterface) PositionsClient {
	return &positionsClient{cc}
}

func (c *positionsClient) Position(ctx context.Context, opts ...grpc.CallOption) (Positions_PositionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Positions_ServiceDesc.Streams[0], "/pgrpc.Positions/Position", opts...)
	if err != nil {
		return nil, err
	}
	x := &positionsPositionClient{stream}
	return x, nil
}

type Positions_PositionClient interface {
	Send(*Application) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type positionsPositionClient struct {
	grpc.ClientStream
}

func (x *positionsPositionClient) Send(m *Application) error {
	return x.ClientStream.SendMsg(m)
}

func (x *positionsPositionClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PositionsServer is the server API for Positions service.
// All implementations must embed UnimplementedPositionsServer
// for forward compatibility
type PositionsServer interface {
	Position(Positions_PositionServer) error
	mustEmbedUnimplementedPositionsServer()
}

// UnimplementedPositionsServer must be embedded to have forward compatible implementations.
type UnimplementedPositionsServer struct {
}

func (UnimplementedPositionsServer) Position(Positions_PositionServer) error {
	return status.Errorf(codes.Unimplemented, "method Position not implemented")
}
func (UnimplementedPositionsServer) mustEmbedUnimplementedPositionsServer() {}

// UnsafePositionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PositionsServer will
// result in compilation errors.
type UnsafePositionsServer interface {
	mustEmbedUnimplementedPositionsServer()
}

func RegisterPositionsServer(s grpc.ServiceRegistrar, srv PositionsServer) {
	s.RegisterService(&Positions_ServiceDesc, srv)
}

func _Positions_Position_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PositionsServer).Position(&positionsPositionServer{stream})
}

type Positions_PositionServer interface {
	Send(*Response) error
	Recv() (*Application, error)
	grpc.ServerStream
}

type positionsPositionServer struct {
	grpc.ServerStream
}

func (x *positionsPositionServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *positionsPositionServer) Recv() (*Application, error) {
	m := new(Application)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Positions_ServiceDesc is the grpc.ServiceDesc for Positions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Positions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pgrpc.Positions",
	HandlerType: (*PositionsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Position",
			Handler:       _Positions_Position_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protocol/broker.proto",
}
